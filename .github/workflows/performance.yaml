name: Performance Test K8s-snap

on:
  push:
    branches: ["master"]
  pull_request:

permissions:
  pull-requests: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BASE_SHA: ${{ github.before || github.event.pull_request.base.sha }}
  BASE_BRANCH: ${{ github.base_ref || github.ref }}
  TARGET_SHA: ${{ github.sha }}

jobs:
  build:
    name: K8s-snap Performance Test
    runs-on: self-hosted-linux-amd64-jammy-large
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: Checking out repo
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install tox
        run: |
          pip install tox
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Set-up R
        run: |
          sudo apt-get install -y --no-install-recommends r-base

          sudo mkdir -p /usr/local/lib/R/site-library/
          # Ensure that actions/cache is allowed to restore the R lib dir.
          sudo chown $USER /usr/local/lib/R/site-library/
      - name: Get R cache key
        id: get-r-cache-key
        run: |
          osVersion=$(lsb_release -rs)
          rVersion=$(dpkg -s r-base | grep Version | cut -d ' ' -f 2)
          key="r-libs-$osVersion-$rVersion"

          echo "r-cache-key=$key" >> "$GITHUB_OUTPUT"
      - name: Restore R package cache
        id: restore-r-cache
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/R/site-library/
          key: ${{ steps.get-r-cache-key.outputs.r-cache-key }}
          restore-keys: ${{ steps.get-r-cache-key.outputs.r-cache-key }}
      - name: Install R dependencies
        if: steps.restore-r-cache.outputs.cache-hit != 'true'
        run: |
          install.packages(
            c("ggplot2", "dplyr", "optparse"),
            repos="https://cloud.r-project.org")
        shell: sudo Rscript {0}
      - name: Install lxd
        uses: canonical/k8s-snap/.github/actions/install-lxd@main
      - name: Download latest k8s-snap
        run: |
          sudo snap download k8s --channel=latest/edge --basename k8s
      - name: Unpack Snap
        run: |
          sudo unsquashfs -d snap-unpack-dir k8s.snap
      - name: Create snap with k8s-dqlite ${{ github.head_ref }} code
        run: |
          make static
          sudo cp ./bin/static/k8s-dqlite snap-unpack-dir/bin/k8s-dqlite
          sudo chmod o+r snap-unpack-dir/bin/k8s-dqlite
          sudo mksquashfs snap-unpack-dir head.snap -noappend -comp lzo -no-fragments
      # - name: Create snap with k8s-dqlite base-code
      #   run: |
      #     set -o pipefail
      #     git fetch origin $BASE_BRANCH
      #     git reset --hard $BASE_SHA
      #     # Needed to cherry-pick commits.
      #     git config --global user.name "Github Actions"
      #     git config --global user.email "worker@org.com"
      #     # dbg: Log retries
      #     git fetch origin lpetrut/log-retries
      #     git cherry-pick a4e26c53e07eb2d4dadfc1da1cf9237b518cab66
      #     make static
      #     sudo cp ./bin/static/k8s-dqlite snap-unpack-dir/bin/k8s-dqlite
      #     sudo chmod o+r snap-unpack-dir/bin/k8s-dqlite
      #     sudo mksquashfs snap-unpack-dir base-code.snap -noappend -comp lzo -no-fragments
      - name: Switch back to target branch
        run: git reset --hard $TARGET_SHA
      - name: Run Performance test ${{ github.head_ref }} snap
        env:
          TEST_SNAP: ${{ github.workspace }}/head.snap
          TEST_SUBSTRATE: lxd
          TEST_LXD_IMAGE: ubuntu:22.04
          TEST_INSPECTION_REPORTS_DIR: ${{ github.workspace }}/inspection-reports
          TEST_METRICS_DIR: ${{ github.workspace }}/test/performance/results
          TEST_RUN_NAME: head
          TEST_KUBE_BURNER_ITERATIONS: 100
        run: |
          cd test/performance
          sg lxd -c 'tox -e performance -- -k test_single_node'
      # - name: Run Performance test for base code snap
      #   env:
      #     TEST_SNAP: ${{ github.workspace }}/base-code.snap
      #     TEST_SUBSTRATE: lxd
      #     TEST_LXD_IMAGE: ubuntu:22.04
      #     TEST_INSPECTION_REPORTS_DIR: ${{ github.workspace }}/inspection-reports
      #     TEST_METRICS_DIR: ${{ github.workspace }}/test/performance/results
      #     TEST_RUN_NAME: base-code
      #     TEST_KUBE_BURNER_ITERATIONS: 15
      #   run: |
      #     cd test/performance
      #     sg lxd -c 'tox -e performance -- -k test_single_node'
      # - name: Generate aggregated Graphs
      #   if: always()
      #   run: |
      #     cd test/performance
      #     mkdir -p ./results/aggregated-results/single-node
      #     cp ./results/head/single-node/metrics.log \
      #        ./results/aggregated-results/single-node/head-metrics.log
      #     cp ./results/base-code/single-node/metrics.log \
      #        ./results/aggregated-results/single-node/base-metrics.log
      #     sudo Rscript parse-performance-metrics.R \
      #       -p ./results/aggregated-results/single-node/ \
      #       -o ./results/aggregated-results/single-node/ \
      #       -f *metrics.log
      - name: Upload performance result
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: ${{ github.workspace }}/test/performance/results
      - name: Prepare inspection reports
        if: always()
        run: |
          tar -czvf inspection-reports.tar.gz -C ${{ github.workspace }} inspection-reports
          echo "artifact_name=inspection-reports" | sed 's/:/-/g' >> $GITHUB_ENV
      - name: Upload inspection report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ${{ github.workspace }}/inspection-reports.tar.gz
      # - name: Upload base-code.snap
      #   if: failure()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: base-code.snap
      #     path: ${{ github.workspace }}/base-code.snap
      - name: Upload head.snap
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: head.snap
          path: ${{ github.workspace }}/head.snap
